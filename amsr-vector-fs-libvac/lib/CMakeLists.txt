###############################################################################
#    Model Element   : CMakeLists
#    Component       : amsr-vector-fs-libvac
#    Author          : vismbn <michael.baumann@vector.com>
#    Copyright       : Copyright (c) 2018, Vector Informatik GmbH.
#    File Name       : CMakeLists.txt
###############################################################################

set(PACKAGE_VERSION 0.0.1)
set(INSTALL_CMAKE_DIR lib/cmake)
set(INSTALL_LIB_DIR lib)
set(INSTALL_INCLUDE_DIR include/vac)
set(LIBRARY_NAME vac)

# Check datatypes size
include(CheckTypeSize)
SET(CMAKE_EXTRA_INCLUDE_FILES sys/time.h)
CHECK_TYPE_SIZE("time_t" SIZEOF_TIME_T LANGUAGE CXX)
SET(CMAKE_EXTRA_INCLUDE_FILES)
if (HAVE_SIZEOF_TIME_T)
  if (SIZEOF_TIME_T LESS 8)
    message(WARNING "Size of struct time_t is ${SIZEOF_TIME_T_CODE} bytes. This only works until year 2038")
  endif()
else()
  message(FATAL_ERROR "Size Check did not work: HAVE_SIZEOF_TIME_T ${HAVE_SIZEOF_TIME_T}")
endif()

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")

file(GLOB_RECURSE LIB_VAC_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)

#create a static library *.a
add_library(${LIBRARY_NAME} STATIC ${LIB_VAC_SRCS})

if(${CMAKE_SYSTEM_NAME} MATCHES "QNX")
  message(STATUS "Linking libsocket for QNX")
  target_link_libraries(${LIBRARY_NAME} socket)
endif()

target_include_directories(${LIBRARY_NAME} PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
)

install(
  TARGETS ${LIBRARY_NAME}
  EXPORT "${LIBRARY_NAME}Targets"
  ARCHIVE DESTINATION ${INSTALL_LIB_DIR}
  COMPONENT dev
)

install(
  DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
  DESTINATION ${INSTALL_INCLUDE_DIR}
  COMPONENT dev
)

# Export targets
export(TARGETS ${LIBRARY_NAME} FILE "${PROJECT_BINARY_DIR}/lib/vacTargets.cmake")
# Store the current build directory in the CMake user package registry for package ${LIBRARY_NAME}
# The find_package command may consider the directory while searching for package ${LIBRARY_NAME}
# This creates an folder ${LIBRARY_NAME} in the ~/.cmake/packages directory with a file containing
# the path to the directory containing this CMakeLists.txt of this project
export(PACKAGE ${LIBRARY_NAME})
install(EXPORT "${LIBRARY_NAME}Targets" DESTINATION ${INSTALL_CMAKE_DIR}/${LIBRARY_NAME})

# creates absolute paths for three varaibles: INSTALL_LIB_DIR, INSTALL_INCLUDE_DIR, INSTALL_CMAKE_DIR
foreach(p LIB INCLUDE CMAKE)
  set(var INSTALL_${p}_DIR)
  if(NOT IS_ABSOLUTE "${${var}}")
    set(ABSOLUTE_${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
  endif()
endforeach()

file(RELATIVE_PATH REL_INCLUDE_DIR "${ABSOLUTE_INSTALL_CMAKE_DIR}" "${ABSOLUTE_INSTALL_INCLUDE_DIR}")

set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/lib/include")
configure_file(
  ${PROJECT_SOURCE_DIR}/cmake/vacConfig.cmake.in
  "${PROJECT_BINARY_DIR}/lib/vacConfig.cmake" @ONLY
)

# ${VAC_CMAKE_DIR} is generated by vacConfig.cmake.in
set(CONF_INCLUDE_DIRS "\${VAC_CMAKE_DIR}/../${REL_INCLUDE_DIR}")
configure_file(
  ${PROJECT_SOURCE_DIR}/cmake/vacConfig.cmake.in
  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vacConfig.toinstall.cmake" @ONLY
)

install(
  FILES ${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vacConfig.toinstall.cmake
  DESTINATION ${INSTALL_CMAKE_DIR}/${LIBRARY_NAME}
  RENAME vacConfig.cmake
)
