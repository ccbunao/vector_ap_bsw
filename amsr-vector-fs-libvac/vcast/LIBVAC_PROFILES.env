ENVIRO.NEW
ENVIRO.NAME:LIBVAC_PROFILES
ENVIRO.COVERAGE_TYPE:Statement
ENVIRO.UUT:reactor
ENVIRO.WHITE_BOX:YES
ENVIRO.MAX_VARY_RANGE: 20
ENVIRO.STUB: ALL_BY_PROTOTYPE
ENVIRO.SEARCH_LIST: ../lib/src/vac/io/
ENVIRO.SEARCH_LIST: ../lib/include/
ENVIRO.TYPE_HANDLED_DIRS_ALLOWED:
ENVIRO.LIBRARY_STUBS:
ENVIRO.PROBE_POINTS:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: if (!result.second
PROBE_CONTEXT_BEFORE:
    auto result =
        exception_event_handlers_.insert(EventHandlerMap::value_type(handle, {event_handler, removal_handler}));
END_PROBE_CONTEXT_BEFORE:
PROBE_CONTEXT_AFTER:
      throw std::invalid_argument("Reactor::RegisterEventHandler: exception_event_handler already registered for handle");
    }
END_PROBE_CONTEXT_AFTER:
PROBE_CODE:
/*******Inserted Before**********/
if (event_type_mask == 20) {
  result.second = false;
}
END_PROBE_CODE:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: auto result =
PROBE_CONTEXT_BEFORE:
  }
  if (event_type_mask & EventType::kExceptionEvent) {
END_PROBE_CONTEXT_BEFORE:
PROBE_CONTEXT_AFTER:
        exception_event_handlers_.insert(EventHandlerMap::value_type(handle, {event_handler, removal_handler}));
    if (!result.second) {
END_PROBE_CONTEXT_AFTER:
PROBE_CODE:
/*******Inserted Before**********/

END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
if (event_type_mask == 17) {
  result.second = false;
}
END_PROBE_CODE_AFTER:
PROBE_DISABLED:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: auto result = read_event_handlers_.insert(EventHandlerMap::value_type(handle, {event_handler, removal_handler}));
PROBE_CODE:
/*******Inserted Before**********/

END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
if (event_type_mask == 17) {
result.second = false;
}
END_PROBE_CODE_AFTER:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: auto result = write_event_handlers_.insert(EventHandlerMap::value_type(handle, {event_handler, removal_handler}));
PROBE_CODE:
/*******Inserted Before**********/

END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
if (event_type_mask == 18) {
   result.second = false;
}
END_PROBE_CODE_AFTER:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: throw std::invalid_argument("Reactor::RegisterEventHandler: event_handler is null");
PROBE_CODE:
/*******Inserted Before**********/
try {
END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
} catch (const std::exception& e) {
  vcast_probe_print( "3.2 Throw Exception NullPtr \n" );
}
END_PROBE_CODE_AFTER:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: throw std::invalid_argument("Reactor::RegisterEventHandler: exception_event_handler already registered for handle");
PROBE_CODE:
/*******Inserted Before**********/
try {
END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
} catch (const std::exception & e) {
  vcast_probe_print( "3.14: Throw exception kExceptionEvent Error \n" );
}
END_PROBE_CODE_AFTER:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: throw std::invalid_argument("Reactor::RegisterEventHandler: read_event_handler already registered for handle");
PROBE_CODE:
/*******Inserted After**********/
try {
END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
} catch (const std::exception& e) {
vcast_probe_print( "3.6 Throw exception kReadEvent Error \n" );
}
END_PROBE_CODE_AFTER:
PROBE_UNIT: reactor
PROBE_FUNCTION: vac::io::Reactor::RegisterEventHandler
PROBE_LINE: throw std::invalid_argument("Reactor::RegisterEventHandler: write_event_handler already registered for handle");
PROBE_CODE:
/*******Inserted Before**********/
try {
END_PROBE_CODE:
PROBE_CODE_AFTER:
/*******Inserted After**********/
} catch (const std::exception& e) {
  vcast_probe_print( "3.10 Throw exception kWriteEvent Error \n" );
}
END_PROBE_CODE_AFTER:
ENVIRO.END_PROBE_POINTS:
ENVIRO.END
